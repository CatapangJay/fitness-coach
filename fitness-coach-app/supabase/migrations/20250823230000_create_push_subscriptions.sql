-- push subscriptions for Web Push
create table if not exists public.push_subscriptions (
  id bigint generated by default as identity primary key,
  user_id uuid not null references auth.users(id) on delete cascade,
  endpoint text not null,
  p256dh text not null,
  auth text not null,
  created_at timestamptz not null default now(),
  updated_at timestamptz not null default now(),
  unique(user_id, endpoint)
);

-- Enable RLS
alter table public.push_subscriptions enable row level security;

-- Policies: users can manage their own subscriptions
create policy if not exists "Can insert own subscription" on public.push_subscriptions
  for insert to authenticated
  with check (auth.uid() = user_id);

create policy if not exists "Can select own subscription" on public.push_subscriptions
  for select using (auth.uid() = user_id);

create policy if not exists "Can delete own subscription" on public.push_subscriptions
  for delete using (auth.uid() = user_id);

-- Trigger to keep updated_at fresh
create or replace function public.set_updated_at()
returns trigger language plpgsql as $$
begin
  new.updated_at = now();
  return new;
end; $$;

create trigger push_subscriptions_updated_at
before update on public.push_subscriptions
for each row execute procedure public.set_updated_at();
